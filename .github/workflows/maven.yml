# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Auth Service [Java 8]

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop
      - 'feature/**'

env:
  # Use docker.io for Docker Hub if empty
  CR_DOMAIN: ${{ secrets.CR_DOMAIN }}
  # github.repository as <account>/<repo>
  CR_REPOSITORY: ${{ secrets.CR_REPOSITORY }}
  CR_USERNAME: ${{ secrets.CR_USERNAME }}
  CR_PASSWORD: ${{ secrets.CR_TOKEN }}
  VERSION: 1.0-SNAPSHOT

jobs:
  build_maven:
    runs-on: ubuntu-latest
    env:
      MVN: mvn --show-version --batch-mode
    outputs:
      app_version: ${{ steps.getVersion.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build Auth Service with Maven
      run: $MVN clean install -Dmaven.skip.test=true -DskipTests --file pom.xml

    - name: Upload Auth Service Jar Artifact
      uses: actions/upload-artifact@v4
      with:
        name: auth-service
        path: target
        retention-days: 1

    - name: Export Version of Build
      id: getVersion
      run: |
        VERSION=$(grep -m2 '<version>' pom.xml | sed 's/[[:space:]]//g' | sed -E 's/<.{0,1}version>//g' | sed -n 2p)
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        

  build_and_publish_image:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [build_maven]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Download Auth Service Jar Artifact
        uses: actions/download-artifact@v4
        with:
          name: auth-service
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.3.0 #v3.3.0
        with:
          cosign-release: 'v2.2.2'

      - name: Check install!
        run: cosign version

      - name: Log in to registry ${{ env.REGISTRY }}

        uses: docker/login-action@v3
        with:
          registry: ${{ env.CR_DOMAIN }}
          username: ${{ env.CR_USERNAME }}
          password: ${{ env.CR_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.CR_DOMAIN }}/${{ env.CR_REPOSITORY }}:${{ needs.build_maven.outputs.app_version }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and Push Docker image
        id: build-and-push
        env:
          APP_VERSION: ${{ needs.build_maven.outputs.app_version }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.CR_DOMAIN }}/${{ env.CR_REPOSITORY }}:${{ needs.build_maven.outputs.app_version }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ env.CR_DOMAIN }}/${{ env.CR_REPOSITORY }}:${{ needs.build_maven.outputs.app_version }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Logout to ${{ env.CR_DOMAIN }}
        run: docker logout

